#BlueJ class context
comment0.target=ArrayList
comment0.text=\r\n\ Class\ ArrayList<E>\ can\ be\ used\ to\ store\ a\ list\ of\ values\ of\ type\ E.\r\n\ \r\n\ @author\ Building\ Java\ Programs\ textBook\ editors\r\n\ @version\ undetected\r\n
comment1.params=
comment1.target=ArrayList()
comment1.text=\r\n\ Constructs\ an\ empty\ list\ of\ default\ capacity\r\n
comment10.params=index\ value
comment10.target=void\ add(int,\ java.lang.Object)
comment10.text=\r\n\ Inserts\ the\ given\ value\ at\ the\ given\ index,\ shifting\ subsequent\r\n\ \ \ \ \ \ \ values\ right\r\n\ @param\ int\ desired\ index\ \r\n\ @param\ int\ desired\ object\ type\ of\ E\r\n\ @throws\ IndexOutOfBoundsException\ if\ index\ is\ not\ between\ 0\ and\ (size()\ -\ 1)\ -\ inclusive\r\n
comment11.params=index
comment11.target=void\ remove(int)
comment11.text=\r\n\ Removes\ value\ at\ the\ given\ index,\ shifting\ subsequent\ values\ left\r\n\ \r\n\ @param\ int\ desired\ index\r\n\ @throws\ IndexOutOfBoundsException\ if\ index\ is\ not\ legal\r\n
comment12.params=index\ value
comment12.target=void\ set(int,\ java.lang.Object)
comment12.text=\ \r\n\ replaces\ the\ value\ at\ the\ given\ index\ with\ the\ given\ value\r\n\ \r\n\ @param\ int\ desired\ index\r\n\ @param\ E\ desired\ object\r\n\ @throws\ IndexOutOfBoundsException\ if\ index\ is\ not\ legal\r\n
comment13.params=
comment13.target=void\ clear()
comment13.text=\r\n\ Empties\ the\ list\r\n
comment14.params=other
comment14.target=void\ addAll(ArrayList)
comment14.text=\r\n\ Appends\ all\ values\ in\ the\ given\ list\ to\ the\ end\ of\ this\ list\r\n\ \r\n\ @param\ ArrayList<E>\ another\ deisred\ Arraylist\ that\ to\ be\ appended\r\n
comment15.params=
comment15.target=java.util.Iterator\ iterator()
comment15.text=\r\n\ returns\ an\ iterator\ for\ this\ list\r\n\ \r\n\ @return\ an\ iterator\ for\ this\ list\r\n
comment16.params=capacity
comment16.target=void\ ensureCapacity(int)
comment16.text=\r\n\ Ensures\ that\ the\ underlying\ array\ has\ the\ given\ capacity;\ if\ not\r\n\ the\ size\ is\ added\ by\ its\ half\ (or\ more\ if\ given\ capacity\ is\ even\ larger)\r\n\ \r\n\ @param\ int\ desired\ capacity\r\n
comment17.params=index
comment17.target=void\ checkIndex(int)
comment17.text=\r\n\ Checks\ the\ given\ index\ if\ it\ is\ between\ 0\ and\ the\ size()\ -\ inclusive;\r\n\ @throws\ an\ IndexOutOfBoundsException\ if\ the\ given\ index\ is\r\n\ \ \ \ \ \ \ not\ a\ legal\ index\ of\ the\ current\ list\r\n
comment2.params=capacity
comment2.target=ArrayList(int)
comment2.text=\ \r\n\ Constructs\ empty\ Arraylist\ with\ specified\ capacity\r\n\ \r\n\ @param\ int\ desired\ capacity\r\n\ @throws\ IllegalArgumentException\ if\ capacity\ is\ equal\ or\ below\ zero\r\n
comment3.params=
comment3.target=int\ size()
comment3.text=\r\n\ Retrieves\ the\ size\ of\ the\ array\ \r\n\ \r\n\ @return\ the\ current\ number\ of\ elements\ in\ the\ list\r\n
comment4.params=index
comment4.target=java.lang.Object\ get(int)
comment4.text=\r\n\ Retrieves\ the\ object\ of\ the\ given\ index\r\n\ \r\n\ @param\ int\ desired\ index\r\n\ @throws\ IndexOutOfBoundsException\ if\ not\ 0\ <\=\ index\ <\ size()\r\n\ @return\ the\ value\ at\ the\ given\ index\ in\ the\ list\r\n
comment5.params=
comment5.target=java.lang.String\ toString()
comment5.text=\r\n\ Creates\ a\ comma-separated,\ bracketed\ version\ of\ the\ list\r\n\ \r\n\ @return\ \ string\ version\ of\ the\ list\r\n
comment6.params=value
comment6.target=int\ indexOf(java.lang.Object)
comment6.text=\r\n\ Retrieves\ the\ index\ of\ the\ given\ object\ type\ of\ E\r\n\ \r\n\ @param\ \ E\ desired\ object\ \r\n\ @return\ the\ position\ of\ the\ first\ occurrence\ of\ the\ given\r\n\ \ \ \ \ \ \ \ \ value\ (-1\ if\ not\ found)\r\n
comment7.params=
comment7.target=boolean\ isEmpty()
comment7.text=\r\n\ Retrieves\ boolean\ if\ list\ is\ empty\ \r\n\ \r\n\ @return\ true\ if\ list\ is\ empty,\ false\ otherwise\r\n
comment8.params=value
comment8.target=boolean\ contains(java.lang.Object)
comment8.text=\r\n\ Checks\ if\ given\ object\ type\ of\ E\ is\ contained\ in\ the\ list\r\n\ \r\n\ @return\ true\ if\ the\ given\ value\ is\ contained\ in\ the\ list,\r\n\ \ \ \ \ \ \ \ \ false\ otherwise\r\n
comment9.params=value
comment9.target=void\ add(java.lang.Object)
comment9.text=\r\n\ Appends\ the\ given\ value\ to\ the\ end\ of\ the\ list\ \r\n\ \r\n\ @param\ \ E\ desired\ object\ \r\n
numComments=18
